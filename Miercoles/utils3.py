# pip install PyOpenGL
# pip install pygame
# pip install pygame==2.0.0.dev6 (for python 3.8.x)
# pip install numpy
# Python 3.8

from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *

import pygame
from pygame.locals import *

import math
import random as rdn
import numpy as np

### Algorithm ###

def set_pixel(x, y, r,g,b, size):
        glColor3f(r, g, b)
        glPointSize(size)

        glBegin(GL_POINTS)
        glVertex2f(x, y)
        glEnd()
        
        # print("{}\t{}".format(x, y))
        # pygame.time.wait(100)

        # option 1 (ok)
        # pygame.display.flip()
        
        # option 2
        #glFlush()

def color_pixel(width, height, x, y, size):
        rgb = glReadPixels(width / 2 + x , height / 2 + y, size ,size , 
                                                GL_RGB, GL_UNSIGNED_BYTE, None)
        return list(rgb)

def clearCanvas():
        glClearColor(0.0, 0.0, 0.0, 1.0)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

def Traslate(vertices, tx, ty):
        T = [
                [1, 0, tx], 
                [0, 1, ty], 
                [0, 0, 1]
        ]
        result = []
        for item in vertices:
                point = np.dot(T, item)
                result.append(point)
        return result
#Modulo del soldadito
n=0/255,0/255,0/255 #color negro
a=255/255,255/255,102/255#color amarillo
r=204/255,102/255,0/255# anaranjado oscuro
v=0/255,102/255,0/255 #color verde oscuro
b=153/255,255/255,51/255 # verde claro
p=255/255,229/255,204/255 # color piel
w=225/255,255/255,255/255 # color blanco
def soldado(x, y,r,g,b,size):
        matrix = [
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,n,n,0,n,n,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,p,p,p,n,p,p,p,n,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,p,p,n,p,p,p,p,n,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,p,n,p,p,p,p,p,n,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,n,0,0,0,n,p,p,p,p,p,p,n,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,n,n,n,a,a,n,0,0,n,p,p,p,p,p,p,n,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,a,a,a,a,a,a,n,n,0,0,n,p,p,p,p,n,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,a,a,a,n,n,n,n,0,0,n,0,n,n,p,p,n,n,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,a,a,n,n,0,0,0,n,n,n,0,0,n,p,n,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,a,n,0,0,0,0,0,n,0,0,0,0,n,p,p,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,n,a,n,0,0,0,0,0,0,0,n,0,n,n,p,p,p,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,n,n,n,n,n,0,0,0,0,0,0,0,0,0,n,p,p,p,p,n,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,n,n,v,v,v,n,n,0,0,0,0,0,0,0,0,n,n,p,p,p,p,p,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,v,v,v,v,v,n,n,0,0,0,0,0,0,0,0,0,n,p,p,p,p,p,n,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,v,v,v,v,n,r,r,n,0,0,0,0,0,w,w,w,n,p,p,p,p,p,n,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,v,v,v,n,n,r,r,r,n,n,0,0,0,n,n,n,p,p,p,p,n,n,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,n,n,p,p,n,r,r,r,n,0,0,0,w,w,w,n,p,p,n,n,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,n,p,p,p,p,n,r,r,n,n,0,0,0,0,0,0,n,n,n,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,p,p,p,p,p,n,r,r,n,b,n,0,0,0,0,0,n,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,p,p,p,p,p,p,n,r,r,n,b,b,n,n,n,n,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,n,p,p,p,p,p,p,p,n,r,r,r,n,b,b,b,n,r,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,n,p,p,p,p,p,p,n,r,r,r,r,n,b,b,b,n,r,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,n,p,p,p,p,p,n,r,r,r,r,r,n,n,b,b,b,n,r,n,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,p,p,p,p,n,r,r,r,r,r,r,n,b,b,b,n,r,n,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,p,p,p,n,n,r,r,r,r,n,b,b,b,b,b,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,n,p,p,p,n,r,r,r,r,n,n,n,n,n,n,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,n,n,p,n,n,r,r,r,r,n,v,v,v,v,v,n,n,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,n,n,p,p,n,r,n,n,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,n,n,p,p,p,n,n,v,v,v,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,p,n,p,p,p,n,v,v,v,v,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,p,p,p,p,n,v,v,v,v,v,v,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,n,n,n,n,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,n,v,v,v,v,v,v,v,v,v,n,n,n,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,v,v,v,v,v,v,v,v,v,n,0,0,0,n,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,v,v,v,v,v,v,v,v,n,n,0,0,0,0,0,n,n,v,v,v,v,v,v,v,n,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0,0,n,v,v,v,v,v,v,n,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,n,n,n,v,v,v,n,0,0,0,0,0,0,0,0,0,0,0,n,v,v,n,n,n,n,0,0,0,0,0,0],
                [0,0,0,0,0,n,0,0,0,n,v,v,n,0,0,0,0,0,0,0,0,0,0,0,0,0,n,v,n,0,0,0,n,0,0,0,0,0],
                [0,0,0,0,n,0,0,0,0,n,n,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,n,0,0,0,0,n,0,0,0,0],
                [0,0,n,n,0,0,0,0,0,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,0,0,0,0,0,n,n,0,0],
                [n,n,0,0,0,0,0,0,n,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,0,0,0,0,0,0,0,n,n],
                [n,n,n,n,n,n,n,n,n,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,n,n,n,n,n,n,n,n,n]
        ]

        for i in range(len(matrix)):
                for j in range(len(matrix[0])):
                        if matrix[j][i] == a:
                                set_pixel(x + i, y + j, 255/255,255/255,102/255, size)
                        #Color del cabello
                        if matrix[j][i] == r:
                                set_pixel(x + i, y + j,204/255,102/255,0/255, size)
                        #Color del chaleco
                        if matrix[j][i] == v:
                                set_pixel(x + i, y + j,0/255,102/255,0/255, size)
                        # Color del pantalon
                        if matrix[j][i] == p:
                                set_pixel(x + i, y + j,255/255,229/255,204/255, size)
                        #  color de piel                        
                        if matrix[j][i] == w:
                                set_pixel(x + i, y + j,255/255, 255/255 , 255/255, size)
                        #  Color del diente                     
                        if matrix[j][i] == b:
                                set_pixel(x + i, y + j,153/255,255/255,51/255, size)
                         # Color del polo                       
                        if matrix[j][i] == n:
                                set_pixel(x + i, y + j,0/255,0/255,0/255, size)
                        

def Plane(x, y,r,g,b, size):
        matrix = [
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,1,1,5,5,5,5,5,5,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,1,5,5,5,5,1,1,1,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,1,5,5,1,1,9,9,9,1,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,1,5,5,1,9,9,9,9,9,9,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,1,5,1,9,9,9,1,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,1,1,1,0,0,1,1,9,1,1,1,3,3,1,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,2,2,2,2,1,1,1,1,1,3,1,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,2,2,2,2,2,2,1,4,1,9,3,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,2,2,1,1,4,4,4,4,4,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,2,2,1,4,4,1,1,1,4,1,3,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,2,2,1,4,4,1,3,3,3,1,4,1,1,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,2,2,1,4,1,3,3,3,3,1,4,1,1,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,2,2,1,4,4,1,3,3,3,3,1,4,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0],
                [1,2,2,1,4,4,1,3,3,3,3,3,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0],
                [1,2,2,1,4,4,1,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1],
                [1,2,1,4,4,4,1,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0],
                [1,2,1,4,4,4,1,1,3,3,3,3,3,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0],
                [0,1,1,1,1,1,0,1,3,3,3,3,3,3,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0],
                [0,0,1,1,3,3,3,3,1,3,3,3,3,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0],
                [0,1,3,3,3,3,3,3,1,1,3,3,3,1,1,3,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0],
                [0,1,3,3,3,3,3,3,1,1,1,3,1,1,3,3,3,1,3,3,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0],
                [0,0,1,3,3,3,3,1,2,2,2,1,1,1,3,3,3,3,3,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0],
                [0,0,1,1,1,1,1,2,2,2,2,1,2,1,1,3,3,3,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,1,2,2,2,2,2,2,2,1,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,1,2,2,2,2,2,2,2,1,1,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,1,2,2,2,2,2,1,1,1,1,2,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,7,7,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,7,7,7,7,7,1,0,0,0,0,1,7,7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,1,7,7,7,1,0,0,0,0,0,1,1,7,7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,7,7,7,7,7,7,1,0,0,0,1,7,7,7,7,7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,7,7,7,7,7,7,7,1,0,0,1,7,7,7,7,7,7,7,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        ]
        print(len(matrix),len(matrix[0]))

        for i in range(len(matrix)):
                for j in range(len(matrix[0])):

                        if matrix[j][i] == 1:
                                r,g,b = 0/255,0/255,0/255
                                set_pixel( x + i, y+j, r, g, b, size)
                        if matrix[j][i] == 2:
                                r, g, b = 0/255,100/255,0/255
                                set_pixel( x + i, y+j, r, g, b, size)
                        if matrix[j][i] == 3:
                                r, g, b = 255/255,160/255,122/255
                                set_pixel( x + i, y+j, r, g, b, size)
                        if matrix[j][i] == 4:
                                r, g, b = 255/255,0/255,0/255
                                set_pixel( x + i, y+j, r, g, b, size)
                        if matrix[j][i] == 5:
                                r, g, b = 255/255,255/255,0/255
                                set_pixel(x + i, y+j, r, g, b, size)
                        if matrix[j][i] == 7:
                                r, g, b = 139/255,69/255,19/255
                                set_pixel(x + i, y+j, r, g, b, size)
                        if matrix[j][i] == 9:
                                r, g, b = 255/255,255/255,255/255
                                set_pixel(x + i, y+j, r, g, b, size)
def MoveDefender(x, y, sx, sy,r,g,b, size):
        #clearCanvas()
        vertices = Traslate([[x, y, 1]], -sx, -sy)
        x = vertices[0][0]
        y = vertices[0][1]
        Plane(x, y, r, g,1, size)
        pygame.display.flip()
        print(x,y)
        return x, y
def CampoDeBatalla(size):
        clearCanvas()
        matrix = [
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,4,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,4,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                
        ]

        for i in range(len(matrix)):
                for j in range(len(matrix[0])):
                        if matrix[i][j] == 0:
                                set_pixel(j*size, i*size, 0/255,255/255,255/255, size)
                                #set_pixel(j*size, i*size, 102/255,102/255,102/255, size)
                        #Color borde
                        if matrix[i][j] == 1:
                                set_pixel(j*size, i*size,76/255,153/255,0/255, size)
                        if matrix[i][j] == 2:
                                set_pixel(j*size, i*size,153/255,76/255,0/255, size)
                        if matrix[i][j] == 3:
                                set_pixel(j*size, i*size,51/255,0/255,0/255, size)
                        if matrix[i][j] == 4:
                                set_pixel(j*size, i*size,0/255,102/255,0/255, size)
                        if matrix[i][j] == 5:
                                set_pixel(j*size, i*size,255/255,255/255,255/255, size)
                        if matrix[i][j] == 6:
                                set_pixel(j*size, i*size,255/255,255/255,102/255, size)
                        #Color del arma
                                #set_pixel(j*size, i*size, 102/255,102/255,102/255, size)
def display_openGL(width, height, scale):
        pygame.display.set_mode((width, height), pygame.OPENGL)

        glClearColor(0.0, 0.0, 0.0, 1.0)
        #glClearColor(1.0, 0.0, 0.0, 0.0)
        glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
        # glScalef(scale, scale, 0)
        gluOrtho2D( 0,800,800,0)
        #gluOrtho2D(-1 * width / 2, width / 2, -1 * height / 2, height / 2)
        #glOrtho(0.0, 500, 0.0, 500, 0.0, 2.0)
