# pip install PyOpenGL
# pip install pygame
# pip install pygame==2.0.0.dev6 (for python 3.8.x)
# pip install numpy
# Python 3.8

from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import pygame
from pygame import *
#from pygame.locals import *

import time
from sys import exit
import math
import random as rdn
import numpy as np


### Algorithm ###

def set_pixel(x, y, r,g,b, size):
        glColor3f(r, g, b)
        glPointSize(size)

        glBegin(GL_POINTS)
        glVertex2f(x, y)
        glEnd()
        
        # print("{}\t{}".format(x, y))
        # pygame.time.wait(100)

        # option 1 (ok)
        # pygame.display.flip()
        
        # option 2
        #glFlush()
def DDA(x0, y0, x1, y1, r, g, b, size):
        
        if(x0==x1) and(y0==y1):
                return [[x0,x1]]
        else:
                points = []
                dx = x1 - x0
                dy = y1 - y0

                x = x0
                y = y0

                if abs(dx) > abs(dy):
                        steps = abs(dx)
                else:
                        steps = abs(dy)

                xi = dx / steps
                yi = dy / steps

                set_pixel(round(x), round(y), r, g, b, size)
                points.append((round(x), round(y)))
                for k in range(steps):
                        x += xi
                        y += yi
                        set_pixel(round(x), round(y), r, g, b, size)
                        points.append((round(x), round(y)))
                return points
        
"""
def CampoCompleto():
       matrix = [
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,4,3,4,0,0,0,0,0,0,0,0,0,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,4,0,0,0,0,0,0,0,0,0,7,7,7,7,7,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,7,0,0,0,0,0,0,0,0,4,3,4,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,4,3,4,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,4,3,4,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,0,0,0,0,0,0,1,1],
                [1,1,0,0,7,7,7,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,0,0,0,1,1],
                [1,1,0,7,7,7,7,7,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,0,0,0,0,0,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
        ]

        return matrix
"""
def CampoDeBatalla(size):
        #clearCanvas()
        matrix = [
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,4,3,4,0,0,0,0,0,0,0,0,0,7,7,7,7,7,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,7,0,0,0,0,0,0,0,0,4,3,4,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,0,0,0,0,0,0,1,1],
                [1,1,0,0,7,7,7,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,0,0,0,1,1],
                [1,1,0,7,7,7,7,7,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,0,0,0,0,0,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                
        ]

        for i in range(len(matrix)):
                for j in range(len(matrix[0])):
                        if matrix[i][j] == 0:
                                set_pixel(j*size, i*size, 0/255,255/255,255/255, size)
                                #set_pixel(j*size, i*size, 102/255,102/255,102/255, size)
                        #Color borde
                        if matrix[i][j] == 1:
                                set_pixel(j*size, i*size,76/255,153/255,0/255, size)
                        if matrix[i][j] == 2:
                                set_pixel(j*size, i*size,153/255,76/255,0/255, size)
                        if matrix[i][j] == 3:
                                set_pixel(j*size, i*size,51/255,0/255,0/255, size)
                        if matrix[i][j] == 4:
                                set_pixel(j*size, i*size,0/255,102/255,0/255, size)
                        if matrix[i][j] == 5:
                                set_pixel(j*size, i*size,255/255,255/255,255/255, size)
                        if matrix[i][j] == 6:
                                set_pixel(j*size, i*size,255/255,255/255,102/255, size)
                        if matrix[i][j] == 7:
                                set_pixel(j*size, i*size,51/255,255/255,102/255, size)
                                
                        #Color del arma
                                #set_pixel(j*size, i*size, 102/255,102/255,102/255, size)
        return matrix

def clearCanvas():
        glClearColor(0.0, 0.0, 0.0, 1.0)
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

def Traslate(vertices, tx, ty):
        T = [
                [1, 0, tx], 
                [0, 1, ty], 
                [0, 0, 1]
        ]
        result = []
        for item in vertices:
                point = np.dot(T, item)
                result.append(point)
        return result
def Reflejo(matriz):
        A=[]
        for j in matriz:
                A+=[j[::-1]]
        return A


def soldado(x, y,r,g,b,size):
        #Modulo del soldadito
        n=0/255,0/255,0/255 #color negro
        a=255/255,255/255,102/255#color amarillo
        r=204/255,102/255,0/255# anaranjado oscuro
        v=0/255,102/255,0/255 #color verde oscuro
        b=153/255,255/255,51/255 # verde claro
        p=255/255,229/255,204/255 # color piel
        w=225/255,255/255,255/255 # color blanco
        matrix = [
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,n,n,0,n,n,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,p,p,p,n,p,p,p,n,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,p,p,n,p,p,p,p,n,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,p,n,p,p,p,p,p,n,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,n,0,0,0,n,p,p,p,p,p,p,n,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,n,n,n,a,a,n,0,0,n,p,p,p,p,p,p,n,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,a,a,a,a,a,a,n,n,0,0,n,p,p,p,p,n,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,a,a,a,n,n,n,n,0,0,n,0,n,n,p,p,n,n,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,a,a,n,n,0,0,0,n,n,n,0,0,n,p,n,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,a,n,0,0,0,0,0,n,0,0,0,0,n,p,p,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,n,a,n,0,0,0,0,0,0,0,n,0,n,n,p,p,p,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,n,n,n,n,n,0,0,0,0,0,0,0,0,0,n,p,p,p,p,n,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,n,n,v,v,v,n,n,0,0,0,0,0,0,0,0,n,n,p,p,p,p,p,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,v,v,v,v,v,n,n,0,0,0,0,0,0,0,0,0,n,p,p,p,p,p,n,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,v,v,v,v,n,r,r,n,0,0,0,0,0,w,w,w,n,p,p,p,p,p,n,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,v,v,v,n,n,r,r,r,n,n,0,0,0,n,n,n,p,p,p,p,n,n,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,n,n,p,p,n,r,r,r,n,0,0,0,w,w,w,n,p,p,n,n,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,n,p,p,p,p,n,r,r,n,n,0,0,0,0,0,0,n,n,n,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,p,p,p,p,p,n,r,r,n,b,n,0,0,0,0,0,n,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,p,p,p,p,p,p,n,r,r,n,b,b,n,n,n,n,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,n,p,p,p,p,p,p,p,n,r,r,r,n,b,b,b,n,r,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,n,p,p,p,p,p,p,n,r,r,r,r,n,b,b,b,n,r,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,n,p,p,p,p,p,n,r,r,r,r,r,n,n,b,b,b,n,r,n,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,p,p,p,p,n,r,r,r,r,r,r,n,b,b,b,n,r,n,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,p,p,p,n,n,r,r,r,r,n,b,b,b,b,b,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,n,p,p,p,n,r,r,r,r,n,n,n,n,n,n,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,n,n,p,n,n,r,r,r,r,n,v,v,v,v,v,n,n,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,n,n,p,p,n,r,n,n,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,n,n,p,p,p,n,n,v,v,v,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,p,n,p,p,p,n,v,v,v,v,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,p,p,p,p,n,v,v,v,v,v,v,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,n,n,n,n,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,n,v,v,v,v,v,v,v,v,v,n,n,n,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,n,v,v,v,v,v,v,v,v,v,n,0,0,0,n,v,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,v,v,v,v,v,v,v,v,n,n,0,0,0,0,0,n,n,v,v,v,v,v,v,v,n,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,v,v,v,v,v,v,v,n,0,0,0,0,0,0,0,0,0,n,v,v,v,v,v,v,n,0,0,0,0,0,0],
                [0,0,0,0,0,0,n,n,n,n,v,v,v,n,0,0,0,0,0,0,0,0,0,0,0,n,v,v,n,n,n,n,0,0,0,0,0,0],
                [0,0,0,0,0,n,0,0,0,n,v,v,n,0,0,0,0,0,0,0,0,0,0,0,0,0,n,v,n,0,0,0,n,0,0,0,0,0],
                [0,0,0,0,n,0,0,0,0,n,n,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,n,0,0,0,0,n,0,0,0,0],
                [0,0,n,n,0,0,0,0,0,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,0,0,0,0,0,n,n,0,0],
                [n,n,0,0,0,0,0,0,n,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,0,0,0,0,0,0,0,n,n],
                [n,n,n,n,n,n,n,n,n,n,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,n,n,n,n,n,n,n,n,n,n]
        ]

        for i in range(len(matrix)):
                for j in range(len(matrix[0])):
                        if matrix[j][i] == a:
                                set_pixel(x + i, y + j, 255/255,255/255,102/255, size)
                        #Color del cabello
                        if matrix[j][i] == r:
                                set_pixel(x + i, y + j,204/255,102/255,0/255, size)
                        #Color del chaleco
                        if matrix[j][i] == v:
                                set_pixel(x + i, y + j,0/255,102/255,0/255, size)
                        # Color del pantalon
                        if matrix[j][i] == p:
                                set_pixel(x + i, y + j,255/255,229/255,204/255, size)
                        #  color de piel                        
                        if matrix[j][i] == w:
                                set_pixel(x + i, y + j,255/255, 255/255 , 255/255, size)
                        #  Color del diente                     
                        if matrix[j][i] == b:
                                set_pixel(x + i, y + j,153/255,255/255,51/255, size)
                         # Color del polo                       
                        if matrix[j][i] == n:
                                set_pixel(x + i, y + j,0/255,0/255,0/255, size)
                        

def Soldier(x, y,r,g,b, size,posicion="D"):
        a=64/255,64/255,64/255
        matrix = [
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,1,1,5,5,5,5,5,5,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,1,5,5,5,5,1,1,1,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,1,5,5,1,1,9,9,9,1,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,1,5,5,1,9,9,9,9,9,9,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,1,5,1,9,9,9,1,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,1,1,1,0,0,1,1,9,1,1,1,3,3,1,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,2,2,2,2,1,1,1,1,1,3,1,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,2,2,2,2,2,2,1,4,1,9,3,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,2,2,1,1,4,4,4,4,4,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,2,2,1,4,4,1,1,1,4,1,3,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,2,2,1,4,4,1,3,3,3,1,4,1,1,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,2,2,1,4,1,3,3,3,3,1,4,1,1,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,2,2,1,4,4,1,3,3,3,3,1,4,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0],
                [1,2,2,1,4,4,1,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
                [1,2,2,1,4,4,1,3,3,3,3,3,1,1,1,1,1,1,1,1,1,8,8,8,8,8,8,8,8,1,8,8,8,8,8,8,1,1,1,1],
                [1,2,1,4,4,4,1,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0],
                [1,2,1,4,4,4,1,1,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0],
                [0,1,1,1,1,1,0,1,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
                [0,0,1,1,3,3,3,3,1,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,1,0,0,0,0],
                [0,1,3,3,3,3,3,3,1,1,3,3,3,1,1,3,3,3,1,1,1,1,8,8,8,8,8,8,8,8,8,8,1,8,8,1,0,0,0,0],
                [0,1,3,3,3,3,3,3,1,1,1,3,1,1,3,3,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,8,8,1,0,0,0,0],
                [0,0,1,3,3,3,3,1,2,2,2,1,1,1,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
                [0,0,1,1,1,1,1,2,2,2,2,1,2,1,1,3,3,3,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,1,2,2,2,2,2,2,2,1,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,1,2,2,2,2,2,2,2,1,1,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,1,2,2,2,2,2,1,1,1,1,2,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,7,7,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,7,7,7,7,7,1,0,0,0,0,1,7,7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,1,7,7,7,1,0,0,0,0,0,1,1,7,7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,7,7,7,7,7,7,1,0,0,0,1,7,7,7,7,7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,7,7,7,7,7,7,7,1,0,0,1,7,7,7,7,7,7,7,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        ]
        if not(posicion=="D"):
                matrix=Reflejo(matrix)

        for i in range(len(matrix)):
                for j in range(len(matrix[0])):

                        if matrix[j][i] == 1:
                                r,g,b = 0/255,0/255,0/255
                                set_pixel( x + i*size, y+j*size, r, g, b, size)
                        if matrix[j][i] == 2:
                                r, g, b = 0/255,100/255,0/255
                                set_pixel( x + i*size, y+j*size, r, g, b, size)
                        if matrix[j][i] == 3:
                                r, g, b = 255/255,160/255,122/255
                                set_pixel( x + i*size, y+j*size, r, g, b, size)
                        if matrix[j][i] == 4:
                                r, g, b = 255/255,0/255,0/255
                                set_pixel( x + i*size, y+j*size, r, g, b, size)
                        if matrix[j][i] == 5:
                                r, g, b = 255/255,255/255,0/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if matrix[j][i] == 7:
                                r, g, b = 139/255,69/255,19/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if matrix[j][i] == 9:
                                r, g, b = 255/255,255/255,255/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if matrix[j][i] == 8:
                                r, g, b = 245/255,224/255,92/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)




def MoveDefenderD(x, y, sx, sy,r,g,b, size,pos):
        #clearCanvas()
        cb=CampoDeBatalla(20)
        vertices = Traslate([[x, y, 1]], sx, sy)
        xh = vertices[0][0]
        yh = vertices[0][1]
        yh=yh//20
        xh=xh//20
        if cb[yh][xh]==1:
                Soldier(x, y, r, g,1, size,pos)
                return x-sx,y-sy
        else:
                vertices = Traslate([[x, y, 1]], sx, sy)
                x = vertices[0][0]
                y = vertices[0][1]
                Soldier(x, y, r, g,1, size,pos)
                print(x,y)
                return x, y

        

def display_openGL(width, height, scale):
        pantalla=pygame.display.set_mode((width, 600), DOUBLEBUF|OPENGL)

        glClearColor(0.0, 0.0, 0.0, 1.0)
        #glClearColor(1.0, 0.0, 0.0, 0.0)
        glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
        glTranslatef(0.01, 0.0, 0)
        #glScalef(scale, scale, 0)
        #gluOrtho2D( -100,800,700,-100)
        gluOrtho2D( 0,width,height,0)
        #gluOrtho2D(-1 * width / 2, width / 2, -1 * height / 2, height / 2)
        #glOrtho(0.0, 500, 0.0, 500, 0.0, 2.0)
        return pantalla

def PintaDisparo(x,y,size):
        matrix = [
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,1,1,5,5,5,5,5,5,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,1,5,5,5,5,1,1,1,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,1,5,5,1,1,9,9,9,1,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,1,5,5,1,9,9,9,9,9,9,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,1,5,1,9,9,9,1,3,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,1,1,1,0,0,1,1,9,1,1,1,3,3,1,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,2,2,2,2,1,1,1,1,1,3,1,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,2,2,2,2,2,2,1,4,1,9,3,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,2,2,1,1,4,4,4,4,4,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,0,0,0,0,0,0],
                [0,0,1,2,2,1,4,4,1,1,1,4,1,3,3,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,0,0,0],
                [0,1,2,2,1,4,4,1,3,3,3,1,4,1,1,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,0,0],
                [0,1,2,2,1,4,1,3,3,3,3,1,4,1,1,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,0],
                [1,2,2,1,4,4,1,3,3,3,3,1,4,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,8,8,8,8,8,8,8,8,7,0],
                [1,2,2,1,4,4,1,3,3,3,3,3,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,8,8,8,8,8,8,8,8,8,0],
                [1,2,2,1,4,4,1,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,8,8,8,8,8,8,8,8,8,7],
                [1,2,1,4,4,4,1,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,8,8,8,8,8,8,8,8,8,0],
                [1,2,1,4,4,4,1,1,3,3,3,3,3,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,8,8,8,8,8,8,8,8,0,0],
                [0,1,1,1,1,1,0,1,3,3,3,3,3,3,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,8,8,8,8,8,8,0,0,0,0],
                [0,0,1,1,3,3,3,3,1,3,3,3,3,3,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,0,0,0,0],
                [0,1,3,3,3,3,3,3,1,1,3,3,3,1,1,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,8,8,0,0,0,0],
                [0,1,3,3,3,3,3,3,1,1,1,3,1,1,3,3,3,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,0,8,8,0,0,0,0],
                [0,0,1,3,3,3,3,1,2,2,2,1,1,1,3,3,3,3,3,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,8,8,0,0,0,0],
                [0,0,1,1,1,1,1,2,2,2,2,1,2,1,1,3,3,3,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,1,2,2,2,2,2,2,2,1,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,1,2,2,2,2,2,2,2,1,1,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,1,1,2,2,2,2,2,1,1,1,1,2,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,1,7,7,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,7,7,7,7,7,1,0,0,0,0,1,7,7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,1,7,7,7,1,0,0,0,0,0,1,1,7,7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,7,7,7,7,7,7,1,0,0,0,1,7,7,7,7,7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,7,7,7,7,7,7,7,1,0,0,1,7,7,7,7,7,7,7,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        ]
        for j in range(len(matrix)):
                for i in range(len(matrix[0])):
                        if matrix[j][i] == 8:
                                r,g,b = 0/255,0/255,0/255
                                set_pixel( x + i*size, y+j*size, r, g, b, size)
                        

def PintaMountruo(x,y,size):
        Monster=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0],
                [0,1,2,1,0,0,1,1,1,1,1,0,0,0,1,2,1,0],
                [0,1,3,1,0,1,2,2,2,2,2,1,0,1,2,3,1,0],
                [0,1,3,2,1,2,2,2,2,2,2,2,1,2,3,1,0,0],
                [0,0,1,2,2,2,3,3,2,2,3,3,3,2,2,2,1,0],
                [0,0,1,2,2,3,3,3,3,3,3,1,3,2,1,0,0,0],
                [0,1,2,2,1,2,3,3,3,3,2,1,2,2,2,1,0,0],
                [0,0,1,2,2,1,2,3,3,2,1,2,3,2,2,1,0,0],
                [0,1,2,2,3,4,1,3,3,1,4,3,2,2,1,1,0,0],
                [0,1,2,2,3,3,3,3,3,3,3,3,3,2,2,1,0,0],
                [0,1,1,2,3,5,5,5,5,3,3,2,2,1,0,0,0,0],
                [0,0,0,0,1,1,3,3,3,3,2,1,1,1,0,0,0,0],
                [0,0,0,1,2,5,1,2,3,2,1,5,5,5,1,0,0,0],
                [0,0,1,2,1,5,5,1,2,1,5,5,5,1,2,1,0,0],
                [0,0,1,2,1,5,5,5,1,5,5,5,5,1,2,1,0,0],
                [0,1,2,2,1,5,5,5,5,5,5,5,5,1,2,2,1,0],
                [0,1,2,1,1,5,5,3,3,5,3,5,5,1,1,2,1,0],
                [0,1,3,0,1,5,3,3,3,3,3,5,2,1,0,3,1,0],
                [0,0,0,0,1,2,3,2,1,1,2,3,2,1,0,0,0,0],
                [0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0]]
        for j in range(len(Monster)):
                for i in range(len(Monster[0])):
                        if Monster[j][i] == 1:
                                r, g, b = 0/255,0/255,0/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 2:
                                r, g, b = 250/255,0/255,0/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 3:
                                r, g, b = 250/255,100/255,0/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 4:
                                r, g, b = 250/255,253/255,254/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 5:
                                r, g, b = 250/255,253/255,180/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
def PintaMountruoAdolorido(x,y,size):
        Monster=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0],
                [0,1,2,1,0,0,1,1,1,1,1,0,0,0,1,2,1,0],
                [0,1,3,1,0,1,2,2,2,2,2,1,0,1,2,3,1,0],
                [0,1,3,2,1,2,2,2,2,2,2,2,1,2,3,1,0,0],
                [0,0,1,2,2,2,3,3,2,2,3,3,3,2,2,2,1,0],
                [0,0,1,2,2,3,3,3,3,3,3,1,3,2,1,0,0,0],
                [0,1,2,2,1,2,3,3,3,3,2,1,2,2,2,1,0,0],
                [0,0,1,2,2,1,2,3,3,2,1,2,3,2,2,1,0,0],
                [0,1,2,2,3,1,4,3,3,4,1,3,2,2,1,1,0,0],
                [0,1,2,2,3,9,3,3,3,3,9,3,3,2,2,1,0,0],
                [0,1,1,2,3,9,5,5,5,3,9,2,2,1,0,0,0,0],
                [0,0,0,0,1,9,3,3,3,3,9,1,1,1,0,0,0,0],
                [0,0,0,1,2,5,1,2,3,2,9,5,5,5,1,0,0,0],
                [0,0,1,2,1,5,5,1,2,1,5,5,5,1,2,1,0,0],
                [0,0,1,2,1,5,5,5,1,5,5,5,5,1,2,1,0,0],
                [0,1,2,2,1,5,5,5,5,5,5,5,5,1,2,2,1,0],
                [0,1,2,1,1,5,5,3,3,5,3,5,5,1,1,2,1,0],
                [0,1,3,0,1,5,3,3,3,3,3,5,2,1,0,3,1,0],
                [0,0,0,0,1,2,3,2,1,1,2,3,2,1,0,0,0,0],
                [0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,0]]
        Monster=Reflejo(Monster)
        for j in range(len(Monster)):
                for i in range(len(Monster[0])):
                        if Monster[j][i] == 1:
                                r, g, b = 0/255,0/255,0/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 2:
                                r, g, b = 250/255,0/255,0/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 3:
                                r, g, b = 250/255,100/255,0/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 4:
                                r, g, b = 250/255,253/255,254/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 5:
                                r, g, b = 250/255,253/255,180/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 6:
                                r, g, b = 34/255,113/255,179/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 9:
                                r, g, b = 0/255,113/2505,179/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)

def PintaCriatura(x, y, size):
        matrix = [
                [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0], #matriz 21x23
                [0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0],
                [0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0],
                [0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0],
                [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0],
                [0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0],
                [0,0,1,1,1,1,1,0,0,1,0,0,0,1,0,0,1,1,1,1,1,0,0],
                [0,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0],
                [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
                [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
                [1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1],
                [1,1,1,1,1,5,5,5,1,1,1,1,1,1,1,5,5,5,1,1,1,1,1],
                [1,1,1,1,5,5,1,6,5,1,1,1,1,1,5,6,1,5,5,1,1,1,1],
                [0,0,1,1,5,5,1,1,5,1,1,1,1,1,5,1,1,5,5,1,1,0,0],
                [0,0,0,1,1,5,1,1,5,1,1,1,1,1,5,1,1,5,1,1,0,0,0],
                [0,0,1,1,1,1,1,1,1,1,4,1,4,1,1,1,1,1,1,1,1,0,0],
                [0,0,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,0,0],
                [0,0,0,1,1,1,3,3,3,3,3,3,3,3,3,3,3,1,1,1,0,0,0],
                [0,0,0,0,0,1,1,1,1,3,2,2,2,3,1,1,1,1,0,0,0,0,0],
                [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]

        ]

        for j in range(len(matrix)):
                for i in range(len(matrix[0])):

                        if matrix[j][i] == 1:
                                r,g,b = 0/255,0/255,0/255
                                set_pixel( x + i, y+j, r, g, b, size)
                        if matrix[j][i] == 2:
                                r,g,b = 255/255,204/255,229/255
                                set_pixel( x + i, y+j, r, g, b, size)
                        if matrix[j][i] == 3:
                                r,g,b = 255/255,0/255,0/255
                                set_pixel( x + i, y+j, r, g, b, size)
                        if matrix[j][i] == 4:
                                r,g,b = 0/255,128/255,255/255
                                set_pixel( x + i, y+j, r, g, b, size)
                        if matrix[j][i] == 5:
                                r,g,b = 102/255,204/255,0/255
                                set_pixel( x + i, y+j, r, g, b, size)
                        if matrix[j][i] == 6:
                                r,g,b = 255/255,255/255,255/255
                                set_pixel( x + i, y+j, r, g, b, size)


def MountruoPsiquico(x, y, size):
        matrix = [
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0], #matrix 42x54
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,4,1,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,4,1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,1,4,4,1,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,1,2,5,5,5,5,5,5,5,5,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,1,5,5,5,1,1,1,1,5,5,5,5,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,1,5,5,5,1,2,1,1,1,1,5,5,5,5,1,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,1,5,5,5,1,1,1,1,1,1,5,5,5,5,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,1,5,5,5,1,1,1,1,1,1,5,5,5,5,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,1,5,5,5,1,1,1,1,5,5,5,5,1,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,1,5,5,5,5,5,5,5,5,5,1,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,1,1,1,0,1,1,1,0,0,0,0,0],
                [0,0,0,0,1,1,1,1,3,3,3,3,3,1,0,1,3,3,3,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1,3,3,3,1,3,3,3,1,3,3,3,1,0,0,0,0],
                [0,0,0,1,3,3,3,1,3,3,3,3,3,3,1,1,3,3,3,1,6,1,2,1,6,1,2,1,6,1,2,1,6,1,2,1,6,1,3,3,1,3,3,3,1,3,3,3,3,3,1,0,0,0],
                [0,1,1,1,3,3,3,1,3,3,3,1,3,3,1,3,3,3,3,1,6,1,2,1,6,6,1,6,6,6,1,6,6,1,2,1,6,1,3,3,1,3,3,3,1,3,1,3,3,3,1,0,0,0],
                [1,3,3,1,3,3,3,1,3,2,3,1,3,3,3,3,3,3,3,1,6,6,1,6,6,6,6,6,6,6,6,6,6,6,1,6,6,1,1,1,1,3,2,3,1,3,1,3,3,3,1,1,1,0],
                [1,3,3,1,3,2,3,1,3,2,3,1,3,3,3,1,1,3,3,3,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,3,3,3,1,3,2,3,1,3,1,3,2,3,1,3,3,1],
                [1,3,3,1,3,2,3,1,1,1,1,3,3,3,3,3,3,1,3,3,1,6,6,6,1,6,6,6,6,6,6,6,1,6,6,1,3,3,3,3,3,1,1,1,3,3,1,3,2,3,1,3,3,1],
                [1,2,3,3,1,1,1,3,3,3,3,3,3,3,3,3,3,2,1,3,3,1,6,1,2,1,6,6,1,6,6,1,2,1,6,1,2,3,3,3,3,3,3,3,3,3,3,1,1,1,1,3,2,1],
                [1,2,3,3,1,3,3,3,3,3,3,3,3,3,1,3,3,2,1,3,3,1,6,1,2,1,6,1,2,1,6,1,2,1,6,1,2,3,3,1,3,3,3,3,3,3,3,3,3,1,3,3,2,1],
                [0,1,1,1,0,1,3,3,3,3,3,3,3,3,3,1,1,1,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,3,1,3,3,3,3,3,3,3,3,3,1,1,1,0],
                [0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,1,0,0,0,0],
                [0,0,0,0,0,0,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,1,3,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,1,3,3,3,3,3,3,3,3,1,0,0,0,0,0,1,3,3,3,3,3,3,3,3,1,3,3,1,0,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,1,1,1,1,3,3,3,3,3,3,1,0,0,0,0,0,1,3,3,3,3,3,3,1,1,1,1,3,3,1,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,1,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,1,3,3,3,1,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,1,3,3,3,1,3,3,3,3,1,0,0,0,0,0,0,0,1,3,3,3,3,1,3,3,3,1,3,3,3,1,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,1,3,2,3,1,3,2,3,1,3,3,2,3,3,3,1,0,0,0,0,0,1,3,3,3,2,3,3,1,3,2,3,1,3,2,3,1,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0]
        ]

        for j in range(len(matrix)):
                for i in range(len(matrix[0])):

                        if matrix[j][i] == 1:
                                r,g,b = 0/255,0/255,0/255
                                set_pixel( x + i*size, y+j*size, r, g, b, size)
                        if matrix[j][i] == 2:
                                r,g,b = 255/255,255/255,255/255 # blanco
                                set_pixel( x + i*size, y+j*size, r, g, b, size)
                        if matrix[j][i] == 3:
                                r,g,b = 153/255,0/255,153/255 # morado
                                set_pixel( x + i*size, y+j*size, r, g, b, size)
                        if matrix[j][i] == 4: 
                                r,g,b = 76/255,153/255,0/255 # verde
                                set_pixel( x + i*size, y+j*size, r, g, b, size)
                        if matrix[j][i] == 5: 
                                r,g,b = 255/255,255/255,0/255 # amarillo
                                set_pixel( x + i*size, y+j*size, r, g, b, size)
                        if matrix[j][i] == 6: 
                                r,g,b = 255/255,0/255,127/255 # rojo
                                set_pixel( x + i*size, y+j*size, r, g, b, size)


#modulo pintar dragon- enemigo
def Dragon(x, y, size):
	matrix = [
		[0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0],
		[0,0,0,1,1,1,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,4,4,4,4,1,1,1,1,0],
		[0,0,0,0,0,0,1,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,4,4,1,1,1,1,5,1,0,0,0],
		[0,0,0,0,0,1,6,1,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,4,1,1,1,5,5,5,5,1,0,0,0,0],
		[0,0,0,0,0,0,1,7,1,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,4,1,1,5,5,5,6,6,5,1,1,0,0,0,0],
		[0,0,0,0,0,0,0,1,0,1,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,1,1,1,5,5,6,6,6,6,6,5,1,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,1,0,1,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,4,1,1,5,5,6,6,7,7,7,6,5,1,1,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,1,1,0,1,2,2,1,0,0,0,0,0,0,0,0,0,0,1,1,4,4,1,1,5,5,6,6,7,7,7,7,7,6,5,1,1,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,1,0,0,0,0,1,2,2,1,0,0,0,0,0,0,0,1,1,4,4,4,1,5,5,6,6,6,7,7,7,7,7,7,7,6,5,1,1,0,0,0,0],
		[0,0,0,0,0,0,0,1,7,1,1,1,0,1,2,2,2,1,0,0,0,0,1,1,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,6,5,1,0,0,0,0],
		[0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,2,2,2,1,0,0,1,4,4,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,2,2,1,1,4,1,1,1,1,2,1,4,1,1,5,5,5,5,5,5,5,5,4,4,4,4,4,4,1,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,2,2,2,1,1,0,0,0,1,2,4,1,4,4,1,6,6,6,6,6,6,6,5,5,5,5,5,5,1,1,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,2,2,2,1,0,0,0,0,1,4,1,1,5,4,1,1,7,7,7,7,7,6,6,6,6,6,5,5,1,1,1,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,2,2,2,2,2,1,0,0,0,1,4,2,1,1,5,4,4,1,7,7,7,7,7,7,7,6,5,5,1,1,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,2,1,1,1,1,1,0,1,4,2,1,1,6,5,5,4,1,7,7,7,7,7,7,6,5,1,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,6,6,1,1,1,0,0,0,1,1,2,2,1,5,1,6,6,5,4,1,7,7,7,7,7,6,5,1,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,6,1,1,1,2,2,2,2,2,1,1,4,2,1,1,5,1,7,7,6,5,4,1,7,7,7,6,5,5,1,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,1,1,1,5,1,2,2,2,2,2,2,2,1,1,4,4,2,1,1,6,5,1,7,7,6,5,4,1,7,7,6,5,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,1,6,7,1,1,2,2,2,2,2,2,2,2,1,4,4,4,1,1,6,6,5,1,7,7,7,6,5,4,1,6,6,5,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,1,1,1,5,1,2,2,2,1,2,2,2,2,2,1,4,4,2,2,1,1,7,6,5,1,7,7,7,6,5,4,1,1,6,5,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,1,6,6,1,1,2,2,4,4,1,2,2,2,2,2,2,4,4,2,1,1,7,7,7,6,5,1,7,6,5,5,4,1,0,1,5,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,1,1,5,1,2,2,2,4,4,1,4,4,4,4,4,2,2,2,2,1,2,1,7,7,7,6,5,1,7,6,4,4,4,1,1,0,1,1,0,0,0,0,0,0],
		[0,0,0,0,0,1,6,1,1,2,1,4,4,4,1,4,4,4,4,4,4,4,2,2,1,2,1,7,7,7,7,6,5,1,6,6,5,4,1,1,1,0,0,0,0,0,0,0,0,0],
		[0,0,0,1,6,6,1,2,2,4,1,4,1,1,4,4,4,4,4,4,4,4,2,2,2,2,1,7,7,7,7,7,6,5,1,5,5,5,4,1,0,1,1,0,0,0,0,0,0,0],
		[0,0,1,3,1,1,2,2,4,4,1,1,4,4,1,1,1,4,4,4,4,4,4,2,2,1,1,7,7,7,7,6,6,5,1,1,1,1,1,4,1,0,0,0,0,0,0,0,0,0],
		[0,0,1,3,1,2,1,2,1,1,4,4,1,1,6,1,6,1,1,4,4,1,1,1,1,1,1,1,7,7,6,5,5,1,1,0,0,0,0,1,4,1,0,0,0,1,1,0,0,0],
		[0,1,1,3,3,1,2,1,1,2,2,1,6,1,1,5,1,1,6,1,4,4,1,1,2,2,2,1,7,6,5,1,1,1,0,0,0,0,0,0,1,4,1,0,1,2,2,1,0,0],
		[1,3,1,1,8,1,2,2,1,2,1,0,1,0,0,1,1,5,5,1,1,4,4,4,2,2,2,1,1,5,5,1,0,0,0,0,0,0,0,0,0,1,4,1,2,1,1,0,0,0],
		[1,3,1,1,0,1,0,2,1,1,0,0,0,0,0,0,0,1,1,6,6,1,4,4,4,2,2,2,1,1,5,1,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0],
		[1,8,1,0,8,0,0,2,1,2,1,0,0,0,0,0,0,1,5,5,6,1,1,4,4,4,2,2,1,1,5,1,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0],
		[1,8,1,4,4,4,4,4,2,1,0,0,0,0,0,0,0,0,1,1,1,1,6,1,4,1,4,2,2,1,1,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0],
		[0,1,4,4,4,4,4,4,1,1,0,0,0,0,0,0,0,0,1,5,5,6,6,1,4,4,1,4,2,1,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0],
		[0,1,4,4,4,1,1,4,2,2,1,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,1,4,1,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0],
		[0,1,4,4,1,3,1,4,2,1,0,0,0,0,0,0,1,0,1,4,4,4,1,5,1,4,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0],
		[0,0,1,4,1,1,4,4,4,1,0,0,0,0,0,1,4,1,4,4,4,4,4,1,1,4,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0],
		[0,0,1,4,1,4,4,1,4,1,0,0,0,0,1,2,1,1,4,4,2,4,4,4,1,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0],
		[0,0,1,4,1,4,1,1,2,2,1,1,1,1,1,2,1,4,4,4,2,1,4,4,4,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0],
		[0,0,1,4,4,2,1,9,1,2,1,3,3,3,1,1,1,4,4,2,2,1,4,4,4,4,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0],
		[0,0,1,4,2,1,1,9,1,2,1,3,1,1,4,1,1,4,4,2,1,2,2,4,4,2,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0],
		[0,0,0,1,2,1,3,1,2,1,1,8,1,2,4,4,1,1,4,2,1,2,2,2,2,2,1,2,4,1,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0],
		[0,0,0,0,1,0,1,0,1,0,0,1,0,1,2,2,4,1,4,2,1,1,2,2,2,1,1,2,2,4,1,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,4,4,1,0,0,1,1,1,1,1,2,2,2,4,1,0,0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0],
		[0,0,0,0,0,0,1,1,0,0,0,0,0,1,2,1,1,2,2,1,0,0,0,1,5,5,1,1,2,2,0,4,1,1,0,0,1,1,1,1,2,2,1,0,0,0,0,0,0,0],
		[0,0,0,0,0,1,3,8,1,1,1,1,1,1,2,2,1,1,2,1,0,0,0,0,1,1,5,5,1,1,2,2,4,4,1,1,2,2,2,2,1,5,1,0,0,0,0,0,0,0],
		[0,0,0,0,1,3,8,1,2,2,2,2,2,1,2,1,0,1,2,1,0,0,0,0,0,0,1,5,5,5,1,1,2,2,4,2,2,1,1,5,5,1,0,0,0,0,0,0,0,0],
		[0,0,0,0,1,8,1,0,1,1,1,1,2,2,2,1,0,0,1,0,0,0,0,0,0,0,0,1,1,5,5,5,1,1,1,1,1,5,5,1,1,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,5,5,5,5,5,1,1,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
		[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],

	]


	for j in range(len(matrix)):
		for i in range(len(matrix[0])):

			if matrix[j][i] == 1:
				r,g,b = 0/255,0/255,0/255
				set_pixel( x + i*size, y+j*size, r, g, b, size)
			if matrix[j][i] == 2:#rgb(196, 10, 6)
				r, g, b = 196/255,61/255,0/255
				set_pixel( x + i*size, y+j*size, r, g, b, size)
			if matrix[j][i] == 3:
				r, g, b = 255/255,255/255,255/255
				set_pixel( x + i*size, y+j*size, r, g, b, size)
			if matrix[j][i] == 4:#204/255,82/255,0/255 
				r, g, b = 196/255,10/255,6/255
				set_pixel( x + i*size, y+j*size, r, g, b, size)
			if matrix[j][i] == 5:#rgb(158, 6, 4)
				r, g, b = 255/255,133/255,51/255
				set_pixel(x + i*size, y+j*size, r, g, b, size)
			if matrix[j][i] == 6:
				r, g, b = 255/255,148/255,77/255
				set_pixel(x + i*size, y+j*size, r, g, b, size)
			if matrix[j][i] == 7:
				r, g, b = 255/255,210/255,77/255
				set_pixel(x + i*size, y+j*size, r, g, b, size)
			if matrix[j][i] == 8:
				r, g, b = 179/255,179/255,204/255
				set_pixel(x + i*size, y+j*size, r, g, b, size)
			if matrix[j][i] == 9:
				r, g, b = 204/255,0/255,0/255
				set_pixel(x + i*size, y+j*size, r, g, b, size)

def Chimeco(x,y,size):
        Monster=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0],
                [0,1,2,1,0,0,1,1,1,1,1,0,0,0,1,2,1,0],
                [0,1,3,1,0,1,2,2,2,2,2,1,0,1,2,3,1,0],
                [0,1,3,2,1,2,2,2,2,2,2,2,1,2,3,1,0,0],
                [0,0,1,2,2,2,3,3,2,2,3,3,3,2,2,2,1,0],
                [0,0,1,2,2,3,3,3,3,3,3,1,3,2,1,0,0,0],
                [0,1,2,2,1,2,3,3,3,3,2,1,2,2,2,1,0,0],
                [0,0,1,2,2,1,2,3,3,2,1,2,3,2,2,1,0,0],
                [0,1,2,2,3,4,1,3,3,1,4,3,2,2,1,1,0,0],
                [0,1,2,2,3,3,3,3,3,3,3,3,3,2,2,1,0,0],
                [0,1,1,2,3,5,5,5,5,3,3,2,2,1,0,0,0,0],
                [0,0,0,0,1,1,3,3,3,3,2,1,1,1,0,0,0,0],
                [0,0,0,1,2,5,1,2,3,2,1,5,5,5,1,0,0,0],
                [0,0,1,2,1,5,5,1,2,1,5,5,5,1,2,1,0,0],
                [0,0,1,2,1,5,5,5,1,5,5,5,5,1,2,1,0,0],
                [0,1,2,2,1,5,5,5,5,5,5,5,5,1,2,2,1,0],
                [0,1,2,1,1,5,5,3,3,5,3,5,5,1,1,2,1,0],
                [0,1,3,0,1,5,3,3,3,3,3,5,2,1,0,3,1,0],
                [0,0,0,0,1,2,3,2,1,1,2,3,2,1,0,0,0,0],
                [0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0]]
        for j in range(len(Monster)):
                for i in range(len(Monster[0])):
                        if Monster[j][i] == 1:
                                r, g, b = 0/255,0/255,0/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 2:
                                r, g, b = 250/255,0/255,0/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 3:
                                r, g, b = 250/255,100/255,0/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 4:
                                r, g, b = 250/255,0/255,20/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)
                        if Monster[j][i] == 5:
                                r, g, b = 250/255,253/255,180/255
                                set_pixel(x + i*size, y+j*size, r, g, b, size)

def CampoDeBatalla1(size):
        #clearCanvas()
        matrix = [
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,6,6,6,0,0,6,6,0,0,0,0,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,6,0,0,0,6,6,0,0,0,0,0,0,6,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,6,6,6,0,0,0,0,0,6,0,6,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,0,0,0,1,1],
                [1,1,2,2,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,0,0,0,0,0,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                
        ]

        for i in range(len(matrix)):
                for j in range(len(matrix[0])):
                        if matrix[i][j] == 0:
                                set_pixel(j*size, i*size, 64/255,64/255,64/255, size)
                                #set_pixel(j*size, i*size, 102/255,102/255,102/255, size)
                        #Color borde
                        if matrix[i][j] == 1:
                                set_pixel(j*size, i*size,0/255,51/255,102/255, size)
                        if matrix[i][j] == 2:
                                set_pixel(j*size, i*size,255/255,255/255,255/255, size)
                        if matrix[i][j] == 3:
                                set_pixel(j*size, i*size,51/255,0/255,0/255, size)
                        if matrix[i][j] == 4:
                                set_pixel(j*size, i*size,0/255,102/255,0/255, size)
                        if matrix[i][j] == 5:
                                set_pixel(j*size, i*size,255/255,255/255,255/255, size)
                        if matrix[i][j] == 6:
                                set_pixel(j*size, i*size,255/255,255/255,102/255, size)
                        if matrix[i][j] == 7:
                                set_pixel(j*size, i*size,51/255,255/255,102/255, size)
                        if matrix[i][j] == 8:
                                set_pixel(j*size, i*size,52/255,153/255,255/255, size)
                        #Color del arma
                                #set_pixel(j*size, i*size, 102/255,102/255,102/255, size)
        return matrix
def CampoDeBatalla2(size):
        #clearCanvas()
        matrix = [
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,0,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,0,0,0,0,0,0,1,1],
                [1,1,0,0,0,0,0,0,0,0,0,0,7,7,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,0,0,0,1,1],
                [1,1,2,2,0,0,0,2,2,0,0,7,7,7,7,7,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,0,0,0,0,0,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                
        ]

        for i in range(len(matrix)):
                for j in range(len(matrix[0])):
                        if matrix[i][j] == 0:
                                set_pixel(j*size, i*size, 185/255,36/255,19/255, size)
                                #set_pixel(j*size, i*size, 102/255,102/255,102/255, size)
                        #Color borde
                        if matrix[i][j] == 1:
                                set_pixel(j*size, i*size,0/255,51/255,102/255, size)
                        if matrix[i][j] == 2:
                                set_pixel(j*size, i*size,20/255,20/255,20/255, size)
                        if matrix[i][j] == 3:
                                set_pixel(j*size, i*size,51/255,0/255,0/255, size)
                        if matrix[i][j] == 4:
                                set_pixel(j*size, i*size,0/255,102/255,0/255, size)
                        if matrix[i][j] == 5:
                                set_pixel(j*size, i*size,255/255,255/255,255/255, size)
                        if matrix[i][j] == 6:
                                set_pixel(j*size, i*size,255/255,255/255,102/255, size)
                        if matrix[i][j] == 7:
                                set_pixel(j*size, i*size,100/255,100/255,100/255, size)
                        if matrix[i][j] == 8:
                                set_pixel(j*size, i*size,52/255,153/255,255/255, size)
                        #Color del arma
                                #set_pixel(j*size, i*size, 102/255,102/255,102/255, size)
        return matrix

def BarraDeVida(posx,posy,vida,vidamaxima,scale):
        DDA(posx, posy, posx+vidamaxima*scale, posy, 255/255, 0/255,0/255, scale)
        DDA(posx, posy, posx+vida*scale, posy, 0/255, 0/255,255/255, scale)
                
        